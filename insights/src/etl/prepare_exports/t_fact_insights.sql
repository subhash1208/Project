-- Databricks notebook source
set hive.exec.dynamic.partition=true;
set hive.exec.dynamic.partition.mode=nonstrict;

DROP TABLE IF EXISTS ${__BLUE_MAIN_DB__}.t_fact_insights;
-- Holds valid insights generated as a part of the current execution
-- Some of these may have been already exported during a prior run, and they need to be merged during sqoop exports
-- Alternatively, use the t_fact_ins table for exports instead.
CREATE TABLE IF NOT EXISTS ${__BLUE_MAIN_DB__}.t_fact_insights (
    ins_hash_val string,
    clnt_obj_id string,
    clnt_obj_id_cmpr_with string,
    yr_cd string,
    yr_cd_cmpr_with string,
    qtr_cd int,
    qtr_cd_cmpr_with int,
    mnth_cd int,
    mnth_cd_cmpr_with int,
    wk_cd int,
    wk_cd_cmpr_with int,
    flsa_stus_cd string,
    flsa_stus_cd_cmpr_with string,
    full_tm_part_tm_cd string,
    full_tm_part_tm_cd_cmpr_with string,
    gndr_cd string,
    gndr_cd_cmpr_with string,
    hr_orgn_id string,
    hr_orgn_id_cmpr_with string,
    job_cd string,
    job_cd_cmpr_with string,
    pay_rt_type_cd string,
    pay_rt_type_cd_cmpr_with string,
    reg_temp_cd string,
    reg_temp_cd_cmpr_with string,
    work_loc_cd string,
    work_loc_cd_cmpr_with string,
    city_id string,
    city_id_cmpr_with string,
    state_prov_cd string,
    state_prov_cd_cmpr_with string,
    iso_3_char_cntry_cd string,
    iso_3_char_cntry_cd_cmpr_with string,
    trmnt_rsn string,
    trmnt_rsn_cmpr_with string,
    adp_lense_cd string,
    adp_lense_cd_cmpr_with string,
    inds_cd string,
    inds_cd_cmpr_with string,
    sector_cd string,
    sector_cd_cmpr_with string,
    super_sect_cd string,
    super_sect_cd_cmpr_with string,
    mngr_pers_obj_id string,
    mngr_pers_obj_id_cmpr_with string,    
    mtrc_ky int,
    ins_scor double,
    pctl_rank double,
    ins_type string,
    ins_rsn string,
    ins_empl_cnt double,
    ins_empl_cnt_cmpr_with double,
    empl_cnt double,
    empl_cnt_cmpr_with double,
    pct_empl_cnt double,
    pct_empl_cnt_cmpr_with double,
    nbr_of_diments int,
    retn_period_strt_person_cnt double,
    retn_period_end_person_cnt double,
    retn_period_strt_person_cnt_r double,
    retn_period_end_person_cnt_r double,
    metric_value double,
    metric_value_r double,
    diff double,
    percentage_diff double,
    normalised_diff double,
    normalised_percentage_diff double,
    zscore_diff double,
    zscore_percentage_diff double,
    normalised_zscore_diff double,
    normalised_zscore_percentage_diff double,
    min_metric_value double,
    max_metric_value double,
    ins_json string,
    export_type string,
    rec_crt_ts DATE,
    excp_type string,
    excp_type_cmpr_with string,
    supvr_pers_obj_id string,
    supvr_pers_obj_id_cmpr_with string,
    RPT_TYPE STRING,
    db_schema STRING,
    environment string
) USING PARQUET 
PARTITIONED BY (environment)
TBLPROPERTIES ('parquet.compression'='SNAPPY');

--CREATE TABLE IF NOT EXISTS ${__GREEN_MAIN_DB__}.t_dim_today (
--    curr_yr INT,
--    curr_qtr INT,
--    curr_mnth INT,
--    curr_qtr_num INT,
--    day_cd STRING,
--    environment STRING
--)
--STORED AS PARQUET;
--
--INSERT OVERWRITE TABLE ${__GREEN_MAIN_DB__}.t_dim_today
--SELECT 
--distinct 
--yr_cd,
--cast(qtr_seq_nbr as int) as qtr_seq_nbr,
--cast(mnth_seq_nbr as int) as mnth_seq_nbr,
--qtr_in_yr_nbr,
--date_format(day_dt,"yyyyMMdd") as day_cd,
--environment
--FROM ${__RO_GREEN_RAW_DB__}.dwh_t_dim_day 
--WHERE 
--to_date(day_dt)=current_date;
--and environment = '${environment}'

INSERT OVERWRITE TABLE ${__BLUE_MAIN_DB__}.t_fact_insights PARTITION(environment)
SELECT
/*+ COALESCE(800) */
ins_hash_val,
  clnt_obj_id,
  clnt_obj_id_cmpr_with,
  yr_cd,
  yr_cd_cmpr_with,
  qtr_cd,
  qtr_cd_cmpr_with,
  mnth_cd,
  mnth_cd_cmpr_with,
  wk_cd,
  wk_cd_cmpr_with,
  flsa_stus_cd,
  flsa_stus_cd_cmpr_with,
  full_tm_part_tm_cd,
  full_tm_part_tm_cd_cmpr_with,
  gndr_cd,
  gndr_cd_cmpr_with,
  hr_orgn_id,
  hr_orgn_id_cmpr_with,
  job_cd,
  job_cd_cmpr_with,
  pay_rt_type_cd,
  pay_rt_type_cd_cmpr_with,
  reg_temp_cd,
  reg_temp_cd_cmpr_with,
  work_loc_cd,
  work_loc_cd_cmpr_with,
  city_id,
  city_id_cmpr_with,
  state_prov_cd,
  state_prov_cd_cmpr_with,
  iso_3_char_cntry_cd,
  iso_3_char_cntry_cd_cmpr_with,
  trmnt_rsn,
  trmnt_rsn_cmpr_with,
  adp_lense_cd,
  adp_lense_cd_cmpr_with,
  inds_cd,
  inds_cd_cmpr_with,
  sector_cd,
  sector_cd_cmpr_with,
  super_sect_cd,
  super_sect_cd_cmpr_with,
  mngr_pers_obj_id,
  mngr_pers_obj_id_cmpr_with,
  mtrc_ky,
  ins_scor,
  pctl_rank,
  ins_type,
  ins_rsn,
  ins_empl_cnt,
  ins_empl_cnt_cmpr_with,
  empl_cnt,
  empl_cnt_cmpr_with,
  pct_empl_cnt,
  pct_empl_cnt_cmpr_with,
  nbr_of_diments,
  retn_period_strt_person_cnt,
  retn_period_end_person_cnt,
  retn_period_strt_person_cnt_r,
  retn_period_end_person_cnt_r,
  metric_value,
  metric_value_r,
  diff,
  percentage_diff,
  normalised_diff,
  normalised_percentage_diff,
  zscore_diff,
  zscore_percentage_diff,
  normalised_zscore_diff,
  normalised_zscore_percentage_diff,
  min_metric_value,
  max_metric_value,
  ins_json,
  export_type,
  time_stamp,
  excp_type,
  excp_type_cmpr_with,
  supvr_pers_obj_id,
  supvr_pers_obj_id_cmpr_with,
  rpt_access,
  db_schema,
  environment
FROM(SELECT
  ins_hash_val,
  clnt_obj_id,
  clnt_obj_id_cmpr_with,
  yr_cd,
  yr_cd_cmpr_with,
  qtr_cd,
  qtr_cd_cmpr_with,
  mnth_cd,
  mnth_cd_cmpr_with,
  wk_cd,
  wk_cd_cmpr_with,
  flsa_stus_cd,
  flsa_stus_cd_cmpr_with,
  full_tm_part_tm_cd,
  full_tm_part_tm_cd_cmpr_with,
  gndr_cd,
  gndr_cd_cmpr_with,
  hr_orgn_id,
  hr_orgn_id_cmpr_with,
  job_cd,
  job_cd_cmpr_with,
  pay_rt_type_cd,
  pay_rt_type_cd_cmpr_with,
  reg_temp_cd,
  reg_temp_cd_cmpr_with,
  work_loc_cd,
  work_loc_cd_cmpr_with,
  city_id,
  city_id_cmpr_with,
  state_prov_cd,
  state_prov_cd_cmpr_with,
  iso_3_char_cntry_cd,
  iso_3_char_cntry_cd_cmpr_with,
  trmnt_rsn,
  trmnt_rsn_cmpr_with,
  adp_lense_cd,
  adp_lense_cd_cmpr_with,
  inds_cd,
  inds_cd_cmpr_with,
  sector_cd,
  sector_cd_cmpr_with,
  super_sect_cd,
  super_sect_cd_cmpr_with,
  mngr_pers_obj_id,
  mngr_pers_obj_id_cmpr_with,
  mtrc_ky,
  ins_scor,
  pctl_rank,
  ins_type,
  ins_rsn,
  ins_empl_cnt,
  ins_empl_cnt_cmpr_with,
  empl_cnt,
  empl_cnt_cmpr_with,
  pct_empl_cnt,
  pct_empl_cnt_cmpr_with,
  nbr_of_diments,
  retn_period_strt_person_cnt,
  retn_period_end_person_cnt,
  retn_period_strt_person_cnt_r,
  retn_period_end_person_cnt_r,
  metric_value,
  metric_value_r,
  diff,
  percentage_diff,
  normalised_diff,
  normalised_percentage_diff,
  zscore_diff,
  zscore_percentage_diff,
  normalised_zscore_diff,
  normalised_zscore_percentage_diff,
  min_metric_value,
  max_metric_value,
  ins_json,
  export_type,
  CURRENT_TIMESTAMP as time_stamp,
  excp_type,
  excp_type_cmpr_with,
  supvr_pers_obj_id,
  supvr_pers_obj_id_cmpr_with,
  rpt_access,
  environment,
  db_schema
FROM ${__BLUE_MAIN_DB__}.t_fact_insights_clnt_int
WHERE (CASE WHEN iso_3_char_cntry_cd IS NOT NULL THEN state_prov_cd ELSE 'DUMMY' END) IS NOT NULL

UNION ALL

SELECT
  ins_hash_val,
  clnt_obj_id,
  clnt_obj_id_cmpr_with,
  yr_cd,
  yr_cd_cmpr_with,
  qtr_cd,
  qtr_cd_cmpr_with,
  mnth_cd,
  mnth_cd_cmpr_with,
  wk_cd,
  wk_cd_cmpr_with,
  flsa_stus_cd,
  flsa_stus_cd_cmpr_with,
  full_tm_part_tm_cd,
  full_tm_part_tm_cd_cmpr_with,
  gndr_cd,
  gndr_cd_cmpr_with,
  hr_orgn_id,
  hr_orgn_id_cmpr_with,
  job_cd,
  job_cd_cmpr_with,
  pay_rt_type_cd,
  pay_rt_type_cd_cmpr_with,
  reg_temp_cd,
  reg_temp_cd_cmpr_with,
  work_loc_cd,
  work_loc_cd_cmpr_with,
  city_id,
  city_id_cmpr_with,
  state_prov_cd,
  state_prov_cd_cmpr_with,
  iso_3_char_cntry_cd,
  iso_3_char_cntry_cd_cmpr_with,
  trmnt_rsn,
  trmnt_rsn_cmpr_with,
  adp_lense_cd,
  adp_lense_cd_cmpr_with,
  inds_cd,
  inds_cd_cmpr_with,
  sector_cd,
  sector_cd_cmpr_with,
  super_sect_cd,
  super_sect_cd_cmpr_with,
  mngr_pers_obj_id,
  mngr_pers_obj_id_cmpr_with,
  mtrc_ky,
  ins_scor,
  pctl_rank,
  ins_type,
  ins_rsn,
  ins_empl_cnt,
  ins_empl_cnt_cmpr_with,
  empl_cnt,
  empl_cnt_cmpr_with,
  pct_empl_cnt,
  pct_empl_cnt_cmpr_with,
  nbr_of_diments,
  retn_period_strt_person_cnt,
  retn_period_end_person_cnt,
  retn_period_strt_person_cnt_r,
  retn_period_end_person_cnt_r,
  metric_value,
  metric_value_r,
  diff,
  percentage_diff,
  normalised_diff,
  normalised_percentage_diff,
  zscore_diff,
  zscore_percentage_diff,
  normalised_zscore_diff,
  normalised_zscore_percentage_diff,
  min_metric_value,
  max_metric_value,
  ins_json,
  export_type,
  CURRENT_TIMESTAMP as time_stamp,
  excp_type,
  excp_type_cmpr_with,
  supvr_pers_obj_id,
  supvr_pers_obj_id_cmpr_with,
  rpt_access,
  environment,
  db_schema
FROM
  ${__BLUE_MAIN_DB__}.t_fact_insights_clnt_int_bm
  WHERE (CASE WHEN iso_3_char_cntry_cd IS NOT NULL THEN state_prov_cd ELSE 'DUMMY' END) IS NOT NULL

--UNION ALL
--
--SELECT
-- ins_hash_val,
-- clnt_obj_id ,
-- clnt_obj_id_cmpr_with ,
-- yr_cd ,
-- yr_cd_cmpr_with ,
-- qtr_cd,
-- qtr_cd_cmpr_with,
-- mnth_cd  ,
-- mnth_cd_cmpr_with  ,
-- wk_cd ,
-- wk_cd_cmpr_with ,
-- flsa_stus_cd,
-- flsa_stus_cd_cmpr_with,
-- full_tm_part_tm_cd ,
-- full_tm_part_tm_cd_cmpr_with,
-- gndr_cd  ,
-- gndr_cd_cmpr_with  ,
-- hr_orgn_id  ,
-- hr_orgn_id_cmpr_with  ,
-- job_cd,
-- job_cd_cmpr_with,
-- pay_rt_type_cd  ,
-- pay_rt_type_cd_cmpr_with ,
-- reg_temp_cd ,
-- reg_temp_cd_cmpr_with ,
-- work_loc_cd ,
-- work_loc_cd_cmpr_with ,
-- city_id  ,
-- city_id_cmpr_with  ,
-- state_prov_cd,
-- state_prov_cd_cmpr_with  ,
-- iso_3_char_cntry_cd,
-- iso_3_char_cntry_cd_cmpr_with  ,
-- trmnt_rsn,
-- trmnt_rsn_cmpr_with,
-- adp_lense_cd,
-- adp_lense_cd_cmpr_with,
-- inds_cd  ,
-- inds_cd_cmpr_with  ,
-- sector_cd,
-- sector_cd_cmpr_with,
-- super_sect_cd,
-- super_sect_cd_cmpr_with  ,
-- mngr_pers_obj_id,
-- mngr_pers_obj_id_cmpr_with  ,
-- mtrc_ky  ,
-- ins_scor ,
-- pctl_rank,
-- ins_type ,
-- ins_rsn  ,
-- empl_cnt ,
-- empl_cnt_cmpr_with ,
-- pct_empl_cnt,
-- pct_empl_cnt_cmpr_with,
-- nbr_of_diments  ,
-- retn_period_strt_person_cnt ,
-- retn_period_end_person_cnt  ,
-- retn_period_strt_person_cnt_r  ,
-- retn_period_end_person_cnt_r,
-- metric_value,
-- metric_value_r  ,
-- diff  ,
-- percentage_diff ,
-- normalised_diff ,
-- normalised_percentage_diff  ,
-- zscore_diff ,
-- zscore_percentage_diff,
-- normalised_zscore_diff,
-- normalised_zscore_percentage_diff ,
-- min_metric_value,
-- max_metric_value,
-- ins_json ,
-- dmn_ky,
-- export_type ,
-- excp_type,
-- excp_type_cmpr_with,
-- supvr_pers_obj_id  ,
-- supvr_pers_obj_id_cmpr_with ,
-- NULL AS rpt_access,
-- environment ,
-- db_schema
--FROM
--  ${__GREEN_MAIN_DB__}.t_fact_insights_clnt_ext_bm 

UNION ALL

SELECT
  ins_hash_val,
  clnt_obj_id,
  clnt_obj_id_cmpr_with,
  yr_cd,
  yr_cd_cmpr_with,
  qtr_cd,
  qtr_cd_cmpr_with,
  mnth_cd,
  mnth_cd_cmpr_with,
  wk_cd,
  wk_cd_cmpr_with,
  flsa_stus_cd,
  flsa_stus_cd_cmpr_with,
  full_tm_part_tm_cd,
  full_tm_part_tm_cd_cmpr_with,
  gndr_cd,
  gndr_cd_cmpr_with,
  hr_orgn_id,
  hr_orgn_id_cmpr_with,
  job_cd,
  job_cd_cmpr_with,
  pay_rt_type_cd,
  pay_rt_type_cd_cmpr_with,
  reg_temp_cd,
  reg_temp_cd_cmpr_with,
  work_loc_cd,
  work_loc_cd_cmpr_with,
  city_id,
  city_id_cmpr_with,
  state_prov_cd,
  state_prov_cd_cmpr_with,
  iso_3_char_cntry_cd,
  iso_3_char_cntry_cd_cmpr_with,
  trmnt_rsn,
  trmnt_rsn_cmpr_with,
  adp_lense_cd,
  adp_lense_cd_cmpr_with,
  inds_cd,
  inds_cd_cmpr_with,
  sector_cd,
  sector_cd_cmpr_with,
  super_sect_cd,
  super_sect_cd_cmpr_with,
  mngr_pers_obj_id,
  mngr_pers_obj_id_cmpr_with,
  mtrc_ky,
  ins_scor,
  pctl_rank,
  ins_type,
  ins_rsn,
  NULL AS ins_empl_cnt,
  NULL AS ins_empl_cnt_cmpr_with,
  empl_cnt,
  empl_cnt_cmpr_with,
  pct_empl_cnt,
  pct_empl_cnt_cmpr_with,
  nbr_of_diments,
  retn_period_strt_person_cnt,
  retn_period_end_person_cnt,
  retn_period_strt_person_cnt_r,
  retn_period_end_person_cnt_r,
  metric_value,
  metric_value_r,
  diff,
  percentage_diff,
  normalised_diff,
  normalised_percentage_diff,
  zscore_diff,
  zscore_percentage_diff,
  normalised_zscore_diff,
  normalised_zscore_percentage_diff,
  min_metric_value,
  max_metric_value,
  ins_json,
  export_type,
  CURRENT_TIMESTAMP as time_stamp,
  excp_type,
  excp_type_cmpr_with,
  supvr_pers_obj_id,
  supvr_pers_obj_id_cmpr_with,
  rpt_access,
  environment,
  db_schema
FROM ${__BLUE_MAIN_DB__}.t_fact_insights_supvr)final
WHERE trim(ins_rsn) != 'NO_INSIGHT';
--DISTRIBUTE BY db_schema;