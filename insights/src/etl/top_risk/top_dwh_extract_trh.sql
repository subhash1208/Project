-- Databricks notebook source
DROP TABLE IF EXISTS ${__BLUE_MAIN_DB__}.TOP_DW_EXTRACT_TRH;

CREATE TABLE IF NOT EXISTS ${__BLUE_MAIN_DB__}.TOP_DW_EXTRACT_TRH
(
  CLNT_OBJ_ID STRING,
  PERS_OBJ_ID STRING,
  IS_TERMINATED DOUBLE,
  QTR_CD STRING,
  QTR_SEQ_NBR DOUBLE,
  QUARTER STRING,
  MNGR_PERS_OBJ_ID STRING,
  HR_ANNL_CMPN_AMT DOUBLE,
  COMPA_RT DOUBLE,
  FULL_TM_EQV_VAL STRING,
  WORK_ASGNMT_STUS_DSC STRING,
  FULL_TM_PART_TM_DSC STRING,
  REG_TEMP_DSC STRING,
  HR_CMPN_FREQ_DSC STRING,
  PAY_RT_TYPE_DSC STRING,
  LST_PROMO_DT STRING,
  HOME_ADDR_PSTL_CD STRING,
  HOME_ADDR_CITY_NM STRING,
  HOME_ADDR_STA_CD STRING,
  MARTL_STUS_DSC STRING,
  GNDR_DSC STRING,
  TNUR_DT STRING,
  TRMNT_DT STRING,
  TRMNT_QTR STRING,
  IS_MANAGER STRING,
  EEO1_JOB_CATG_DSC STRING,
  MNGR_LVL_DSC STRING,
  ADP_LENS_CD STRING,
  ONET_CODE STRING,
  JOB_CD STRING,
  FLSA_STUS_CD STRING,
  FLSA_STUS_DSC STRING,
  SOC_L1_CODE STRING,
  SOC_L2_CODE STRING,
  SOC_L3_CODE STRING,
  SOC_L4_CODE STRING,
  WORK_CITY STRING,
  WORK_PSTL_CD STRING,
  WORK_STATE_NM STRING,
  WORK_STATE_CD STRING,
  WORK_RGN_NM STRING,
  DEMOTION_EVENTS STRING,
  JOB_RECLASSIFICATION_EVENTS STRING,
  PAY_RT_CHANGE_EVENTS DOUBLE,
  PROMOTION_EVENTS DOUBLE,
  TRANSFER_EVENTS DOUBLE,
  POSITION_CHANGE_EVENTS DOUBLE,
  QTRS_SINCE_LAST_PROMOTION DOUBLE,
  QTRS_SINCE_LAST_JOB_CHANGE DOUBLE,
  BIRTH_YEAR DOUBLE,
  STANDARD_HOURS DOUBLE,
  TOTAL_HOURS DOUBLE,
  TOTAL_EARNINGS_WITHOUT_HOURS DOUBLE,
  TOTAL_EARNINGS_WITH_HOURS DOUBLE,
  ANNL_CMPN_AMT DOUBLE,
  OVERTIME_DBLTIME_HOURS DOUBLE,
  OVERTIME_DBLTIME_EARNINGS DOUBLE,
  RATE_AMOUNT DOUBLE,
  AGE DOUBLE,
  SALARY_HIKE DOUBLE,
  EARNINGS_HIKE DOUBLE,
  TENURE_MONTHS DOUBLE,
  TENURE_IN_JOB_MONTHS DOUBLE,
  TENURE_IN_CMPN_MONTHS DOUBLE,
  TRAVEL_DISTANCE DOUBLE,
  TRAVEL_DURATION DOUBLE,
  SAME_HOME_WORK_STATE STRING,
  LAYER DOUBLE,
  DIRECT_REPORTS DOUBLE,
  INDIRECT_REPORTS DOUBLE,
  TOTAL_REPORTS DOUBLE,
  SPAN DOUBLE,
  CHILD_LAYERS DOUBLE,
  TERMINATION_REASON STRING,
  TERMINATION_TYPE STRING,
  TERMINATION_TYPE_ORIG STRING,
  SOURCE_SYSTEM STRING,
  L2_CODE STRING,
  FWA_REC_EFF_STRT_DT TIMESTAMP,
  FWA_REC_EFF_END_DT TIMESTAMP,
  DB_SCHEMA STRING
)
USING PARQUET;


INSERT OVERWRITE TABLE ${__BLUE_MAIN_DB__}.TOP_DW_EXTRACT_TRH
SELECT 
    P.CLNT_OBJ_ID,
    P.PERS_OBJ_ID,
    CAST(P.IS_TERMINATED AS SMALLINT) AS IS_TERMINATED,
    'QTR_' || P.QTR_CD AS QTR_CD,
    CAST(NULL AS SMALLINT) AS QTR_SEQ_NBR,
    'Q' || P.QUARTER AS QUARTER,
    P.MNGR_PERS_OBJ_ID,
    P.ANNL_CMPN_AMT AS HR_ANNL_CMPN_AMT,
    P.COMPA_RT,
    CAST(P.FULL_TM_EQV_VAL AS STRING) AS FULL_TM_EQV_VAL,
    P.WORK_ASGNMT_STUS_DSC,
    CASE WHEN UPPER(P.FULL_TM_PART_TM_DSC) LIKE '%PART%TIME%' OR
        UPPER(P.FULL_TM_PART_TM_DSC) LIKE '%CASUAL%' OR
        UPPER(P.FULL_TM_PART_TM_DSC) LIKE '%TEMP%' OR
        UPPER(P.FULL_TM_PART_TM_DSC) LIKE '%INTERMITTENT%' OR
        UPPER(P.FULL_TM_PART_TM_DSC) LIKE '%HOURLY%' OR
        UPPER(P.FULL_TM_PART_TM_DSC) LIKE '%PER%DIEM%' THEN 'PART_TIME' ELSE 'FULL_TIME' END AS FULL_TM_PART_TM_DSC,
    CASE WHEN UPPER(P.REG_TEMP_DSC) LIKE '%NON%REG%' OR UPPER(P.REG_TEMP_DSC) LIKE '%NON%SCHED%' OR UPPER(P.REG_TEMP_DSC) LIKE '%SEASONAL%' OR UPPER(P.REG_TEMP_DSC) LIKE '%TEMP%' THEN 'TEMPORARY' ELSE 'REGULAR' END AS REG_TEMP_DSC,
    P.HR_CMPN_FREQ_DSC,
    CASE WHEN UPPER(P.PAY_RT_TYPE_DSC) LIKE '%DAILY%' THEN 'DAILY'
      WHEN UPPER(P.PAY_RT_TYPE_DSC) LIKE '%HOURLY%' THEN 'HOURLY'
      ELSE 'SALARIED' END AS PAY_RT_TYPE_DSC,
    CAST(WE.LST_PROMO_DT AS STRING) AS LST_PROMO_DT,
    P.HOME_ADDR_PSTL_CD,
    P.HOME_ADDR_CITY_NM,
    P.HOME_ADDR_STATE_CD AS HOME_ADDR_STA_CD,
    CASE WHEN UPPER(P.MARTL_STUS_DSC) LIKE '%NO%MARRIED%' OR UPPER(P.MARTL_STUS_DSC) LIKE '%UN%MARRIED%' OR UPPER(P.MARTL_STUS_DSC) LIKE '%SINGLE%' THEN 'SINGLE'
    WHEN UPPER(P.MARTL_STUS_DSC) LIKE '%PARTNER%' OR UPPER(P.MARTL_STUS_DSC) LIKE '%UNION%' OR UPPER(P.MARTL_STUS_DSC) LIKE '%MARRIED%' OR UPPER(P.MARTL_STUS_DSC) LIKE '%NON%REG%' OR UPPER(P.MARTL_STUS_DSC) LIKE '%NON%SCHED%' THEN 'MARRIED'
    WHEN UPPER(P.MARTL_STUS_DSC) LIKE '%WIDOW%' THEN 'WIDOWED'
    WHEN UPPER(P.MARTL_STUS_DSC) LIKE '%DIVORCE%' OR UPPER(P.MARTL_STUS_DSC) LIKE '%SEPARA%' THEN 'DIVORCED'
    ELSE '' END AS MARTL_STUS_DSC,
    P.GNDR_DSC,
    P.TNUR_DT,
    P.TRMNT_DT,
    P.TRMNT_QTR,
    CASE WHEN R.MNGR_IND = 1 THEN  'MANAGER' ELSE 'NON_MANAGER' END AS IS_MANAGER ,
    P.EEO1_JOB_CATG_DSC,
    P.MNGR_LVL_DSC,
    P.ONET_TITLE AS ADP_LENS_CD,
    NULL AS ONET_CODE,
    P.JOB_CD ,
    P.FLSA_STUS_CD,
    CASE WHEN UPPER(P.FLSA_STUS_DSC) LIKE '%NO%EXEMPT%' OR UPPER(P.FLSA_STUS_DSC) LIKE '%FLSA%REQUIRED%' THEN 'NONEXEMPT' ELSE 'EXEMPT' END AS FLSA_STUS_DSC,
    CAST(NULL as STRING) AS SOC_L1_CODE,
    CAST(NULL as STRING) AS SOC_L2_CODE,
    CAST(NULL as STRING) AS SOC_L3_CODE,
    CAST(NULL as STRING) AS SOC_L4_CODE,
    P.CITY_NM AS WORK_CITY,
    P.PSTL_CD AS WORK_PSTL_CD,
    P.STATE_PROV_NM AS WORK_STATE_NM,
    P.STATE_PROV_CD AS WORK_STATE_CD,
    NULL AS  WORK_RGN_NM,
    CAST(WE.DEMOTION_EVENTS AS SMALLINT) AS DEMOTION_EVENTS,
    CAST(WE.JOB_RECLASSIFICATION_EVENTS AS SMALLINT) AS JOB_RECLASSIFICATION_EVENTS,
    CAST(WE.PAY_RT_CHANGE_EVENTS AS SMALLINT) AS PAY_RT_CHANGE_EVENTS,
    CAST(WE.PROMOTION_EVENTS AS SMALLINT) AS PROMOTION_EVENTS,
    CAST(WE.TRANSFER_EVENTS AS SMALLINT) AS TRANSFER_EVENTS,
    CAST(WE.POSITION_CHANGE_EVENTS AS SMALLINT) AS POSITION_CHANGE_EVENTS,
    CAST(
      (CASE WHEN WE.LST_PROMO_DT IS NOT NULL AND LEAST(WE.QTRS_SINCE_LAST_PROMOTION, ROUND(DATEDIFF(CURRENT_DATE, WE.LST_PROMO_DT)/90)) > 900 THEN NULL
      WHEN WE.LST_PROMO_DT IS NOT NULL AND LEAST(WE.QTRS_SINCE_LAST_PROMOTION, ROUND(DATEDIFF(CURRENT_DATE, WE.LST_PROMO_DT)/90)) <= 900 THEN LEAST(WE.QTRS_SINCE_LAST_PROMOTION, ROUND(DATEDIFF(CURRENT_DATE,WE.LST_PROMO_DT)/90)) 
      WHEN WE.LST_PROMO_DT IS NULL AND WE.QTRS_SINCE_LAST_PROMOTION > 900 THEN NULL
      ELSE WE.QTRS_SINCE_LAST_PROMOTION END)
      AS SMALLINT) AS QTRS_SINCE_LAST_PROMOTION,
    CAST(
      (CASE WHEN WE.QTRS_SINCE_LAST_JOB_CHANGE > 900 THEN NULL
      ELSE WE.QTRS_SINCE_LAST_JOB_CHANGE END)
      AS SMALLINT) AS QTRS_SINCE_LAST_JOB_CHANGE,
    CAST(P.BIRTH_YEAR AS INT) AS BIRTH_YEAR, 
    CAST(NULL as INT) AS STANDARD_HOURS,
    PR.TOTAL_HOURS,
    CAST(NULL as INT) AS TOTAL_EARNINGS_WITHOUT_HOURS,
    PR.TOTAL_EARNINGS AS TOTAL_EARNINGS_WITH_HOURS,
    NVL(PR.TOTAL_EARNINGS, P.ANNL_CMPN_AMT) AS ANNL_CMPN_AMT, -- Default to base compensation if earnings is not available yet
    CAST(OT.OVERTIME_DBLTIME_HOURS as INT) AS OVERTIME_DBLTIME_HOURS,
    CAST(OT.OVERTIME_DBLTIME_EARNINGS as INT) AS OVERTIME_DBLTIME_EARNINGS,
    CAST(OT.RATE_AMOUNT as INT) AS RATE_AMOUNT,
    P.AGE,
    CASE WHEN SH.PREV_TOTAL_EARNINGS > 0 THEN ROUND(CAST((((PR.TOTAL_EARNINGS - SH.PREV_TOTAL_EARNINGS)/SH.PREV_TOTAL_EARNINGS) * 100) as INT),2)  
           ELSE NULL END AS SALARY_HIKE,
    CAST(NULL as INT) AS EARNINGS_HIKE,
    P.TENURE_MONTHS,
    CASE WHEN WE.TENURE_IN_JOB_MONTHS > P.TENURE_MONTHS THEN P.TENURE_MONTHS ELSE WE.TENURE_IN_JOB_MONTHS END AS TENURE_IN_JOB_MONTHS,
    CAST(P.TENURE_IN_CMPN_MONTHS AS int) AS TENURE_IN_CMPN_MONTHS,
    P.TRAVEL_DISTANCE,
    P.TRAVEL_DURATION,
    P.SAME_HOME_WORK_STATE,
    R.LAYER,
    R.DIRECT_REPORTS,
    R.INDIRECT_REPORTS,
    R.TOTAL_REPORTS,
    R.SPAN,
    R.CHILD_LAYERS,
    'Active' AS TERMINATION_REASON,
    'Active' AS TERMINATION_TYPE,
    'Active' AS TERMINATION_TYPE_ORIG,
    UPPER(C.CLNT_SRC_SYS_NM) AS SOURCE_SYSTEM,
    C.INDS_KY||'' AS L2_CODE,
    P.REC_EFF_STRT_DT AS FWA_REC_EFF_STRT_DT,
    P.REC_EFF_END_DT AS FWA_REC_EFF_END_DT,
    P.DB_SCHEMA
FROM
  (SELECT DISTINCT
          F.CLNT_OBJ_ID,
          PD.PERS_OBJ_ID,
          CASE WHEN F.WORK_ASGNMT_STUS_CD IN ('T','R','D') THEN 1 ELSE 0 END AS IS_TERMINATED,
          YEAR(CURRENT_DATE) || CEIL(EXTRACT(MONTH FROM CURRENT_DATE)/3) AS QTR_CD,
          CAST(CEIL(EXTRACT(MONTH FROM CURRENT_DATE)/3) AS SMALLINT) AS QUARTER,
          F.MNGR_PERS_OBJ_ID,
          F.ANNL_CMPN_AMT,
          F.COMPA_RT,
          F.FULL_TM_EQV_VAL,
          F.WORK_ASGNMT_STUS_CD,
          REGEXP_REPLACE(UPPER(PPD.FULL_TM_PART_TM_DSC),'[^A-Z0-9]','_') AS FULL_TM_PART_TM_DSC,
          PPD.REG_TEMP_DSC,
          PPD.WORK_ASGNMT_STUS_DSC,
          PPD.HR_CMPN_FREQ_DSC,
          PPD.PAY_RT_TYPE_DSC,
          SUBSTR(PD.HOME_ADDR_PSTL_CD,1,5) AS HOME_ADDR_PSTL_CD,
          PD.HOME_ADDR_CITY_NM,
          PD.HOME_ADDR_STATE_CD,     -- renamed to STATE
          PD.MARTL_STUS_DSC,
          PD.GNDR_DSC,
          from_unixtime(unix_timestamp(PD.TNUR_DT ,'yyyyMMdd'), 'yyyyMMdd') AS TNUR_DT,
          NULL AS TRMNT_DT,
          NULL AS TRMNT_QTR,
          CASE 
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%exec%' THEN 'Executive/Senior Level Officials and Managers'
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%first%' THEN 'First/Mid Level Officials and Managers'
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%profes%' THEN 'Professionals'
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%technician%' THEN 'Technicians'
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%sales%' THEN 'Sales Workers'
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%support%' THEN 'Administrative Support Workers'
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%admin%' THEN 'Administrative Support Workers'
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%admn%' THEN 'Administrative Support Workers'
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%craft%' THEN 'Craft Workers'
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%operative%' THEN 'Operatives'
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%labor%' THEN 'Laborers and Helpers'
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%labour%' THEN 'Laborers and Helpers'
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%help%' THEN 'Laborers and Helpers'
            WHEN LOWER(JD.EEO1_JOB_CATG_DSC) LIKE '%service%' THEN 'Service Workers'
          ELSE 'UNKNOWN' END AS EEO1_JOB_CATG_DSC,
          JD.MNGR_LVL_CD, 
          REGEXP_REPLACE(UPPER(JD.MNGR_LVL_DSC),'[^A-Z0-9]','_') AS MNGR_LVL_DSC,
          JD.JOB_DSC AS ORIGINAL_JOB_TITLE,
          JD.PRMRY_STD_JOB_TITL_KY AS ONET_TITLE,
          JD.JOB_CD,
          JD.FLSA_STUS_CD,
          REGEXP_REPLACE(UPPER(JD.FLSA_STUS_DSC),'[^A-Z0-9]','_') AS FLSA_STUS_DSC,
          WD.CITY_NM, 
          SUBSTR(WD.PSTL_CD,1,5) as PSTL_CD, 
          WD.STATE_PROV_NM, 
          WD.STATE_PROV_CD,
          --WEF fields
          PD.BIRTH_YR AS BIRTH_YEAR,
          CAST(ROUND(DATEDIFF(CURRENT_DATE,PD.BIRTH_DT_HASH)/365) AS SMALLINT) AS AGE,
          CAST(ROUND(DATEDIFF(CURRENT_DATE,PD.TNUR_DT)/30) AS INT) AS TENURE_MONTHS,
           NULL AS TENURE_IN_CMPN_MONTHS,
          ROUND(3.91 + (2 * ASIN(
            SQRT(
              COS(Z1.LAT_NBR/57.2957795) *
              COS(Z2.LAT_NBR/57.2957795) *
              POWER(SIN((Z1.LNGTD_NBR - Z2.LNGTD_NBR)/(2*57.2957795)), 2)
                  +
              POWER(SIN((Z1.LAT_NBR - Z2.LAT_NBR)/(2*57.2957795)), 2)
            )
          ) * 3961 * 1.23),1) AS TRAVEL_DISTANCE,
          ROUND(11.7 + (2 * ASIN(
            SQRT(
              COS(Z1.LAT_NBR/57.2957795) *
              COS(Z2.LAT_NBR/57.2957795) *
              POWER(SIN((Z1.LNGTD_NBR - Z2.LNGTD_NBR)/(2*57.2957795)), 2)
                  +
              POWER(SIN((Z1.LAT_NBR - Z2.LAT_NBR)/(2*57.2957795)), 2)
            )
          ) * 6371 * 0.778),1) AS TRAVEL_DURATION,
          CASE WHEN PD.HOME_ADDR_STATE_CD = WD.STATE_PROV_CD THEN 'Yes' ELSE 'No' END AS SAME_HOME_WORK_STATE,
          F.REC_EFF_STRT_DT,
          F.REC_EFF_END_DT,
      F.DB_SCHEMA,
      F.ENVIRONMENT
        FROM
          ${__RO_BLUE_RAW_DB__}.DWH_T_FACT_WORK_ASGNMT F
          INNER JOIN ${__RO_BLUE_RAW_DB__}.DWH_T_DIM_PERS PD
          ON 
            F.CLNT_OBJ_ID = PD.CLNT_OBJ_ID AND
            F.PERS_OBJ_ID = PD.PERS_OBJ_ID AND 
            F.DB_SCHEMA   = PD.DB_SCHEMA   AND
            F.ENVIRONMENT = PD.ENVIRONMENT
          INNER JOIN (SELECT 
            JTM.PRMRY_STD_JOB_TITL_KY,
            TDIM.JOB_DSC,
            TDIM.JOB_CD,
            TDIM.FACT_LOAD_DIM_REC_IND ,
            TDIM.CLNT_OBJ_ID,
            TDIM.MNGR_LVL_CD,
            TDIM.FLSA_STUS_CD,
            TDIM.FLSA_STUS_DSC,
            TDIM.MNGR_LVL_DSC,
            TDIM.EEO1_JOB_CATG_DSC,
            TDIM.ENVIRONMENT,
            TDIM.DB_SCHEMA,
            ROW_NUMBER() OVER (PARTITION BY TDIM.CLNT_OBJ_ID,TDIM.JOB_CD ORDER BY JTM.PRMRY_JOB_TITL_CONFDNC_SCOR DESC, JTM.PRMRY_STD_JOB_TITL_KY) AS RANKING
            FROM 
            ${__RO_BLUE_RAW_DB__}.DWH_T_DIM_JOB TDIM 
            LEFT OUTER JOIN (
			select * from 
			${__RO_BLUE_RAW_DB__}.DWH_T_CLNT_JOB_TITL_MAPPING 
			where ingest_date in (select max(ingest_date) from ${__RO_BLUE_RAW_DB__}.DWH_T_CLNT_JOB_TITL_MAPPING)) JTM
              ON TDIM.CLNT_OBJ_ID = JTM.CLNT_OBJ_ID
              AND COALESCE(TDIM.JOB_CD,'UNKNOWN') = COALESCE(JTM.JOB_CD,'UNKNOWN')
              AND TDIM.DB_SCHEMA   = JTM.DB_SCHEMA
              AND TDIM.ENVIRONMENT = JTM.ENVIRONMENT
            WHERE
              TDIM.FACT_LOAD_DIM_REC_IND != 1
          ) JD
          ON 
            F.CLNT_OBJ_ID = JD.CLNT_OBJ_ID AND
            COALESCE(F.JOB_CD,'UNKNOWN') = COALESCE(JD.JOB_CD,'UNKNOWN') AND
            F.DB_SCHEMA   = JD.DB_SCHEMA   AND
            F.ENVIRONMENT = JD.ENVIRONMENT AND
            JD.RANKING = 1
          INNER JOIN ${__RO_BLUE_RAW_DB__}.DWH_T_DIM_PERS_PRFL_ATTR PPD
          ON
            F.CLNT_OBJ_ID = PPD.CLNT_OBJ_ID AND
            COALESCE(F.WORK_ASGNMT_STUS_CD,'UNKNOWN') =     COALESCE(PPD.WORK_ASGNMT_STUS_CD,'UNKNOWN')      AND
            COALESCE(F.PERS_STUS_CD,'UNKNOWN')      =       COALESCE(PPD.PERS_STUS_CD,'UNKNOWN') AND
            COALESCE(F.PAY_RT_TYPE_CD,'UNKNOWN')    =     COALESCE(PPD.PAY_RT_TYPE_CD,'UNKNOWN') AND
            COALESCE(F.HR_CMPN_FREQ_CD,'UNKNOWN')   =     COALESCE(PPD.HR_CMPN_FREQ_CD,'UNKNOWN') AND
            COALESCE(F.REG_TEMP_CD,'UNKNOWN')     =     COALESCE(PPD.REG_TEMP_CD,'UNKNOWN') AND
            COALESCE(F.FULL_TM_PART_TM_CD,'UNKNOWN')  =     COALESCE(PPD.FULL_TM_PART_TM_CD,'UNKNOWN')  AND
            COALESCE(F.PERS_CLSFN_CD,'UNKNOWN')     =      COALESCE(PPD.PERS_CLSFN_CD,'UNKNOWN') AND
            COALESCE(F.DB_SCHEMA,'UNKNOWN')   = COALESCE(PPD.DB_SCHEMA,'UNKNOWN')   AND
            COALESCE(F.ENVIRONMENT,'UNKNOWN') = COALESCE(PPD.ENVIRONMENT,'UNKNOWN')
          INNER JOIN ${__RO_BLUE_RAW_DB__}.DWH_T_DIM_WORK_LOC WD
          ON
            F.CLNT_OBJ_ID = WD.CLNT_OBJ_ID AND
            COALESCE(F.WORK_LOC_CD,'UNKNOWN') = COALESCE(WD.WORK_LOC_CD,'UNKNOWN') AND
            WD.ISO_3_CHAR_CNTRY_CD = 'USA' AND 
            F.DB_SCHEMA   = WD.DB_SCHEMA   AND
            F.ENVIRONMENT = WD.ENVIRONMENT AND
            (
              PD.TRMNT_DT IS NULL OR PD.TRMNT_DT > DATE_SUB(CURRENT_DATE,365) OR 
              F.WORK_ASGNMT_ACTV_IND=1 OR 
              F.WORK_ASGNMT_STUS_CD in ('A','L','P','S')
            )
          LEFT OUTER JOIN ${__RO_BLUE_RAW_DB__}.DWH_T_DIM_GEO_INFO Z1
          ON SUBSTR(PD.HOME_ADDR_PSTL_CD,1,5) = Z1.PSTL_CD AND 
              F.ENVIRONMENT = Z1.ENVIRONMENT
          LEFT OUTER JOIN ${__RO_BLUE_RAW_DB__}.DWH_T_DIM_GEO_INFO Z2
          ON SUBSTR(WD.PSTL_CD,1,5) = Z2.PSTL_CD AND 
              F.ENVIRONMENT = Z2.ENVIRONMENT
        WHERE
          F.GLOB_EXCLD_IND=0 AND F.REC_EFF_STRT_DT < CURRENT_DATE AND
          F.REC_EFF_END_DT > CURRENT_DATE AND
          F.PRMRY_WORK_ASGNMT_IND = 1 
          --AND F.ENVIRONMENT='${environment}'
          ) P 
  INNER JOIN (
    SELECT DISTINCT DC.CLNT_OBJ_ID,
  CASE WHEN DB_SCHEMA LIKE '%VNR%' OR DB_SCHEMA LIKE '%CORE10%' THEN 'VANTAGE'
        WHEN DB_SCHEMA LIKE '%WFN%' THEN 'WFN'
        WHEN DB_SCHEMA LIKE '%CORE20%' THEN 'EV5'
        WHEN DB_SCHEMA LIKE '%GHCM%' THEN 'GHCM' END AS CLNT_SRC_SYS_NM,
  CASE WHEN NAICS IS NOT NULL AND LENGTH(NAICS) = 6 THEN SUBSTR(trim(NAICS),1,2) END AS INDS_KY,
  DC.DB_SCHEMA, DC.ENVIRONMENT
  FROM ${__RO_BLUE_RAW_DB__}.DWH_T_DIM_CLNT DC
  LEFT OUTER JOIN 
    (SELECT OOID, NAICS FROM 
    (SELECT OOID, NAICS, ROW_NUMBER() OVER (PARTITION BY OOID ORDER BY YYYYMM DESC) AS RANKING 
      FROM ${__RO_BLUE_LANDING_BASE_DB__}.CLIENT_MASTER)
      WHERE RANKING = 1) CM
    ON
      DC.CLNT_OBJ_ID = CM.OOID) C
  ON C.CLNT_OBJ_ID = P.CLNT_OBJ_ID AND C.DB_SCHEMA = P.DB_SCHEMA AND C.ENVIRONMENT = P.ENVIRONMENT
  LEFT OUTER JOIN (
    SELECT T1.CLNT_OBJ_ID,T1.DB_SCHEMA,T1.ENVIRONMENT,
    T2.PERS_OBJ_ID,
    CAST(LAYER AS SMALLINT) AS LAYER,
    CAST(DIRECT_REPORTS AS SMALLINT) AS DIRECT_REPORTS,
    CAST(INDIRECT_REPORTS AS SMALLINT) AS INDIRECT_REPORTS,
    INDIRECT_REPORTS + DIRECT_REPORTS   AS TOTAL_REPORTS ,
    SPAN,
    CAST(CHILD_LAYERS AS SMALLINT) AS CHILD_LAYERS,
    CASE WHEN INDIRECT_REPORTS + DIRECT_REPORTS = 0 THEN 0 ELSE 1  END AS MNGR_IND
  FROM
    (SELECT F.CLNT_OBJ_ID,F.DB_SCHEMA,F.ENVIRONMENT,
      MNGR_PERS_OBJ_ID AS PERS_OBJ_ID,
      MAX(LVL_FROM_PRNT_NBR) + 1 AS LAYER
    FROM ${__RO_BLUE_RAW_DB__}.DWH_T_RPT_TO_HRCHY F
    WHERE TRIM(LOGIN_MNGR_PERS_OBJ_ID)    != ' '
    AND LOGIN_MNGR_PERS_OBJ_ID IS NOT NULL
  AND LOGIN_MNGR_PERS_OBJ_ID != 'UNKNOWN'
    GROUP BY F.CLNT_OBJ_ID,F.DB_SCHEMA,F.ENVIRONMENT,MNGR_PERS_OBJ_ID
    ) T1
  LEFT OUTER JOIN
    (SELECT F.CLNT_OBJ_ID,F.DB_SCHEMA,F.ENVIRONMENT,
      LOGIN_MNGR_PERS_OBJ_ID AS PERS_OBJ_ID,
      SUM(CASE WHEN LVL_FROM_PRNT_NBR = 1 THEN 1 ELSE 0 END) DIRECT_REPORTS,
      SUM(CASE WHEN LVL_FROM_PRNT_NBR IN (0,1) THEN 0 ELSE 1 END) AS INDIRECT_REPORTS,
      SUM(1)       AS TOTAL_REPORTS,
      CASE WHEN MAX(LVL_FROM_PRNT_NBR) = 0 THEN 0 
      WHEN MAX(LVL_FROM_PRNT_NBR) = 1 THEN sum(1)/MAX(LVL_FROM_PRNT_NBR)   
      WHEN MAX(LVL_FROM_PRNT_NBR) > 1 THEN sum(1)/(MAX(LVL_FROM_PRNT_NBR) - 1) END AS SPAN,
      MAX(LVL_FROM_PRNT_NBR)  AS CHILD_LAYERS
    FROM ${__RO_BLUE_RAW_DB__}.DWH_T_RPT_TO_HRCHY F
    WHERE TRIM(LOGIN_MNGR_PERS_OBJ_ID)    != ' '    
  AND LOGIN_MNGR_PERS_OBJ_ID != 'UNKNOWN'
    AND LOGIN_MNGR_PERS_OBJ_ID IS NOT NULL
    GROUP BY F.CLNT_OBJ_ID,F.DB_SCHEMA,F.ENVIRONMENT,LOGIN_MNGR_PERS_OBJ_ID
    ) T2
  ON T1.CLNT_OBJ_ID  = T2.CLNT_OBJ_ID
  AND T1.PERS_OBJ_ID = T2.PERS_OBJ_ID
  AND T1.DB_SCHEMA = T2.DB_SCHEMA
  AND T1.ENVIRONMENT = T2.ENVIRONMENT
  LEFT OUTER JOIN 
  (
    SELECT CLNT_OBJ_ID, LOGIN_MNGR_PERS_OBJ_ID,DB_SCHEMA,ENVIRONMENT, COUNT(1) AS NUM_OF_MNGRS FROM
      (SELECT A.CLNT_OBJ_ID,A.LOGIN_MNGR_PERS_OBJ_ID,B.MNGR_PERS_OBJ_ID,A.DB_SCHEMA,A.ENVIRONMENT FROM
        (SELECT CLNT_OBJ_ID,LOGIN_MNGR_PERS_OBJ_ID,DB_SCHEMA,ENVIRONMENT,MNGR_PERS_OBJ_ID FROM ${__RO_BLUE_RAW_DB__}.DWH_T_RPT_TO_HRCHY WHERE LVL_FROM_PRNT_NBR = 1) A 
        INNER JOIN
        (SELECT F.CLNT_OBJ_ID, LOGIN_MNGR_PERS_OBJ_ID, MNGR_PERS_OBJ_ID,DB_SCHEMA,ENVIRONMENT,
          RANK() OVER (PARTITION BY F.CLNT_OBJ_ID, LOGIN_MNGR_PERS_OBJ_ID ORDER BY MNGR_PERS_OBJ_ID ) AS RNK 
        FROM ${__RO_BLUE_RAW_DB__}.DWH_T_RPT_TO_HRCHY F
        WHERE LVL_FROM_PRNT_NBR >= 1)B
        ON A.CLNT_OBJ_ID=B.CLNT_OBJ_ID AND A.LOGIN_MNGR_PERS_OBJ_ID=B.MNGR_PERS_OBJ_ID
      AND A.DB_SCHEMA = B.DB_SCHEMA AND A.ENVIRONMENT = B.ENVIRONMENT)
      GROUP BY CLNT_OBJ_ID,DB_SCHEMA,ENVIRONMENT,LOGIN_MNGR_PERS_OBJ_ID
  ) T3
  ON
  T1.CLNT_OBJ_ID = T3.CLNT_OBJ_ID 
  AND T2.PERS_OBJ_ID = T3.LOGIN_MNGR_PERS_OBJ_ID
  AND T2.DB_SCHEMA = T3.DB_SCHEMA
  AND T2.ENVIRONMENT = T3.ENVIRONMENT  ) R
  ON
    P.CLNT_OBJ_ID = R.CLNT_OBJ_ID AND
    P.PERS_OBJ_ID = R.PERS_OBJ_ID  AND
    P.DB_SCHEMA  =  R.DB_SCHEMA  AND
    P.ENVIRONMENT  =  R.ENVIRONMENT
  LEFT OUTER JOIN (
  SELECT 
    F.CLNT_OBJ_ID,F.DB_SCHEMA,F.ENVIRONMENT,
    PERS_OBJ_ID,
    SUM(HRS_NBR) AS TOTAL_HOURS,
    -- If the employee is on payroll for less than 1 month, return NULL and default with base pay
    CASE WHEN DATEDIFF(MAX(CHECK_DT),MIN(CHECK_DT))  < 30 THEN NULL
    ELSE ROUND(SUM(EARN_AMT) * 365 / DATEDIFF(MAX(CHECK_DT),MIN(CHECK_DT)),2) END AS TOTAL_EARNINGS,
    CASE WHEN DATEDIFF(MAX(CHECK_DT),MIN(CHECK_DT))  < 90 THEN 'Y' ELSE 'N' END AS EXCLUDE_FLAG
  FROM ${__RO_BLUE_RAW_DB__}.DWH_T_FACT_PAYRL_EARN_DTL F
  WHERE
    F.GLOB_EXCLD_IND=0 AND TO_DATE(CHECK_DT) BETWEEN DATE_SUB(CURRENT_DATE,365) AND CURRENT_DATE
  GROUP BY
    F.CLNT_OBJ_ID,F.DB_SCHEMA,F.ENVIRONMENT,
    PERS_OBJ_ID
    ) PR
  ON
    P.CLNT_OBJ_ID = PR.CLNT_OBJ_ID AND
    P.PERS_OBJ_ID = PR.PERS_OBJ_ID  AND
    P.DB_SCHEMA  =  PR.DB_SCHEMA  AND
    P.ENVIRONMENT  =  PR.ENVIRONMENT
  LEFT OUTER JOIN (
  SELECT 
    F.CLNT_OBJ_ID,F.DB_SCHEMA,F.ENVIRONMENT,
    PERS_OBJ_ID, 
    SUM(HRS_NBR) AS TOTAL_HOURS, 
    -- If the employee is on payroll for less than 1 month, return NULL and default with base pay
    CASE WHEN DATEDIFF(MAX(CHECK_DT),MIN(CHECK_DT))  < 30 THEN NULL 
    ELSE ROUND(SUM(EARN_AMT) * 365 / DATEDIFF(MAX(CHECK_DT),MIN(CHECK_DT)),2) END AS PREV_TOTAL_EARNINGS
  FROM ${__RO_BLUE_RAW_DB__}.DWH_T_FACT_PAYRL_EARN_DTL F
  WHERE
    F.GLOB_EXCLD_IND=0 AND TO_DATE(CHECK_DT) BETWEEN DATE_SUB(CURRENT_DATE,730) AND DATE_SUB(CURRENT_DATE,365)
  GROUP BY 
    F.CLNT_OBJ_ID,F.DB_SCHEMA,F.ENVIRONMENT,
    PERS_OBJ_ID) SH
  ON 
    P.CLNT_OBJ_ID = SH.CLNT_OBJ_ID AND
    P.PERS_OBJ_ID = SH.PERS_OBJ_ID  AND
    P.DB_SCHEMA  =  SH.DB_SCHEMA  AND
    P.ENVIRONMENT  =  SH.ENVIRONMENT
  LEFT OUTER JOIN (
  SELECT CLNT_OBJ_ID,DB_SCHEMA,ENVIRONMENT,
    PERS_OBJ_ID,
    MAX(LST_PROMO_DT)     AS LST_PROMO_DT,
    SUM(DMOT_IND)         AS DEMOTION_EVENTS,
    SUM(JOB_CHNG_IND)     AS JOB_RECLASSIFICATION_EVENTS,
    SUM(CMPN_RT_CHNG_IND) AS PAY_RT_CHANGE_EVENTS,
    SUM(PROMO_IND)        AS PROMOTION_EVENTS,
    SUM(XFER_IND)         AS TRANSFER_EVENTS,
    0                     AS POSITION_CHANGE_EVENTS,
    MAX(JOB_ENTRY_DT)     AS JOB_ENTRY_DT,
    CAST(ROUND(DATEDIFF(CURRENT_DATE,MAX(JOB_ENTRY_DT))/30) AS INT) AS TENURE_IN_JOB_MONTHS,
    CASE 
      WHEN MAX(JOB_CHNG_DT) IS NULL 
      THEN 999 
      ELSE ROUND(DATEDIFF(CURRENT_DATE,MAX(JOB_CHNG_DT))/90)
    END AS QTRS_SINCE_LAST_JOB_CHANGE,
    CASE 
      WHEN MAX(PROMO_DT) IS NULL 
      THEN 999 
      ELSE ROUND(DATEDIFF(CURRENT_DATE,MAX(PROMO_DT))/90)
    END AS QTRS_SINCE_LAST_PROMOTION
  FROM
    (SELECT F.CLNT_OBJ_ID,F.DB_SCHEMA,F.ENVIRONMENT,
      F.PERS_OBJ_ID,
      JOB_CD,
      MIN(EVENT_EFF_DT) AS JOB_ENTRY_DT,
      SUM(CASE
        WHEN UPPER(EVENT_DSC) LIKE '%DEMOT%' OR F.EVENT_CD = 'DEM'
        THEN 1
        ELSE 0
      END) AS DMOT_IND,
      SUM(CASE
        WHEN XFER_IND = 1 
        THEN 1
        ELSE 0
      END) AS XFER_IND,
      SUM(CASE
        WHEN PROMO_IND = 1 OR UPPER(F.EVENT_CD) = 'PRO'
        THEN 1
        ELSE 0
      END) AS PROMO_IND,
      0 AS CMPN_RT_CHNG_IND,
      SUM(CASE
        WHEN UPPER(EVENT_RSN_DSC) LIKE '%JOB%CHANGE%' OR UPPER(EVENT_RSN_DSC) LIKE '%POS%'
        THEN 1
        ELSE 0
      END) AS JOB_CHNG_IND,  
      MAX(LST_PROMO_DT) AS LST_PROMO_DT,
      MAX(CASE
        WHEN UPPER(EVENT_RSN_DSC) LIKE '%JOB%CHANGE%' OR UPPER(EVENT_RSN_DSC) LIKE '%POS%'
        THEN EVENT_EFF_DT
        ELSE NULL
      END) AS JOB_CHNG_DT,
      MAX(CASE
        WHEN PROMO_IND = 1 OR UPPER(F.EVENT_CD) = 'PRO'  
        THEN EVENT_EFF_DT
        ELSE NULL
      END) AS PROMO_DT
    FROM ${__RO_BLUE_RAW_DB__}.DWH_T_FACT_WORK_EVENT F
    INNER JOIN ${__RO_BLUE_RAW_DB__}.DWH_T_DIM_WORK_EVENT D
    ON 
      COALESCE(F.EVENT_CD  ,'UNKNOWN') = COALESCE(D.EVENT_CD,'UNKNOWN')
      AND COALESCE(F.EVENT_RSN_CD,'UNKNOWN') = COALESCE(D.EVENT_RSN_CD,'UNKNOWN')
      AND F.CLNT_OBJ_ID           = D.CLNT_OBJ_ID
      AND F.WORK_ASGNMT_STUS_CD   = 'A'
      AND F.DB_SCHEMA  =  D.DB_SCHEMA
      AND F.ENVIRONMENT  =  D.ENVIRONMENT
    WHERE F.GLOB_EXCLD_IND=0
    GROUP BY F.CLNT_OBJ_ID,F.DB_SCHEMA,F.ENVIRONMENT,
      F.PERS_OBJ_ID,
      JOB_CD
    )
  GROUP BY CLNT_OBJ_ID,DB_SCHEMA,ENVIRONMENT,
    PERS_OBJ_ID) WE
  ON
    P.CLNT_OBJ_ID = WE.CLNT_OBJ_ID AND
    P.PERS_OBJ_ID = WE.PERS_OBJ_ID  AND
    P.DB_SCHEMA  =  WE.DB_SCHEMA  AND
    P.ENVIRONMENT  =  WE.ENVIRONMENT
  LEFT OUTER JOIN (
    SELECT 
    F.CLNT_OBJ_ID, F.PERS_OBJ_ID, F.DB_SCHEMA,F.ENVIRONMENT,
    SUM(HRS_NBR) AS OVERTIME_DBLTIME_HOURS,
    SUM(EARN_AMT) AS OVERTIME_DBLTIME_EARNINGS,
    0 AS RATE_AMOUNT
  FROM
    ${__RO_BLUE_RAW_DB__}.DWH_T_FACT_PAYRL_EARN_DTL F
    INNER JOIN ${__RO_BLUE_RAW_DB__}.DWH_T_DIM_PAYRL_EARN D
    ON 
      COALESCE(F.EARN_CD,'UNKNOWN') = COALESCE(D.EARN_CD,'UNKNOWN')    AND
      COALESCE(F.PAY_GRP_CD,'UNKNOWN') = COALESCE(D.PAY_GRP_CD,'UNKNOWN') AND
      F.CLNT_OBJ_ID =  D.CLNT_OBJ_ID AND
      F.DB_SCHEMA  =  D.DB_SCHEMA AND
      F.ENVIRONMENT  =  D.ENVIRONMENT AND
      D.OT_IND = 1
WHERE F.GLOB_EXCLD_IND=0 AND F.CHECK_DT BETWEEN ADD_MONTHS(date_trunc('quarter',CURRENT_DATE), -3) AND DATE_SUB(date_trunc('quarter',CURRENT_DATE),1)
  GROUP BY F.CLNT_OBJ_ID, F.DB_SCHEMA,F.ENVIRONMENT, F.PERS_OBJ_ID) OT
  ON
    P.CLNT_OBJ_ID = OT.CLNT_OBJ_ID AND
    P.PERS_OBJ_ID = OT.PERS_OBJ_ID  AND
    P.DB_SCHEMA  =  OT.DB_SCHEMA  AND
    P.ENVIRONMENT  =  OT.ENVIRONMENT
WHERE EXCLUDE_FLAG='N';